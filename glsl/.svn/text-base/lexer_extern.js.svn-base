/*
Copyright (c) 2011 Cimaron Shanahan

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

(function(glsl, lexer) {

	glsl.lexer = lexer;

	//These are used in the lexer, but since the lexer is autogenerated, and doesn't allow
	//additional custom code, we provide them here, the compiler object will link them in
	function KEYWORD(reserved_version, allowed_version, token) {
		var ES = this.yy.state.es_shader;
		if (typeof allowed_version != 'number') {
			var aES = allowed_version[1];
			allowed_version = allowed_version[0];
		}
		if (typeof reserved_version != 'number') {
			var rES = reserved_version[1];
			reserved_version = reserved_version[0];
		}

		if (this.yy.state.language_version >= allowed_version || (aES && ES)) {
			return token;
		} else if (this.yy.state.language_version >= reserved_version || (rES && ES)) {
			//this.error(yylloc, yyextra, "Illegal use of reserved word '%s'", yytext);
			return ERROR_TOK;
		} else {
			//this WILL give an error, but this code probably isn't needed since we aren't targeting multiple versions
			this.yylval.identifier = this.yytext;
			return this.classify_identifier(this.yy.extra, this.yytext);
		}
		return token;
	}

	function classify_identifier(state, name) {
		if (state.symbols.get_variable(name) || state.symbols.get_function(name)) {
			return this.yy.parser.yytokentype.IDENTIFIER;
		} else if (state.symbols.get_type(name)) {
			return this.yy.parser.yytokentype.TYPE_IDENTIFIER;
		} else {
			return this.yy.parser.yytokentype.NEW_IDENTIFIER;
		}
	}

	//-----------------------------------------------------------
	//External interface

	lexer.KEYWORD = KEYWORD;
	lexer.classify_identifier = classify_identifier;
	lexer.yylval = {};
	lexer.IS_UINT = function(yytext) {
		return yytext.substr(yytext.length - 1).toUpperCase() == 'U';
	};

}(glsl, lexer));

